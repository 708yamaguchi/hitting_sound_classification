<launch>
  <param name="/mini_microphone/chunk" value="512"/>
  <param name="/mini_microphone/length" value="512"/>
  <param name="/mini_microphone/rate" value="44100"/>
  <arg name="cutoff_rate" default="8000"/>
  <arg name="save_image" default="false"/>
  <arg name="save_spectrum" default="false"/>
  <arg name="target_class" default="table"/>

  <node pkg="hitting_sound_classification" type="listen_mini_microphone.py" name="listen_mini_microphone" output="screen" respawn="true"/>

  <!-- <node pkg="euslib" type="spectrum_analyzer_mini_microphone.py" name="spectrum_analyzer_mini_microphone" output="screen"/> -->

  <node pkg="hitting_sound_classification" type="save_hitting_sound.py" name="save_hitting_sound" output="screen" respawn="true">
    <param name="cutoff_rate" value="$(arg cutoff_rate)"/>
    <param name="time_to_listen" value="0.3"/>
    <param name="save_image" value="$(arg save_image)"/>
    <param name="save_spectrum" value="$(arg save_spectrum)"/>
    <param name="target_class" value="$(arg target_class)"/>
  </node>

  <!-- sound classification if we do not save sound -->
  <group unless="$(arg save_image)">
    <group unless="$(arg save_spectrum)">
      <!-- <node pkg="hitting_sound_classification" type="classify_sound_spectrum_ros.py" name="classify_sound_spectrum_ros" output="screen"> -->
      <!--   <param name="cutoff_rate" value="$(arg cutoff_rate)"/> -->
      <!-- </node> -->
      <node pkg="hitting_sound_classification" type="classify_sound_image_ros.py" name="classify_sound_image_ros" output="screen">
        <param name="model" value="$(find hitting_sound_classification)/scripts/result/model_best.npz"/>
      </node>
      <node pkg="rqt_gui" type="rqt_gui" name="rqt_gui" args="--perspective-file $(find hitting_sound_classification)/config/sound_image_classification.perspective"/>
      <node pkg="usb_cam" type="usb_cam_node" name="usb_cam_node" />
    </group>
  </group>
</launch>
